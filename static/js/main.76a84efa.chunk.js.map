{"version":3,"sources":["config/firebase.js","Login.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","code","email","document","querySelector","value","password","getElementById","auth","signInWithEmailAndPassword","then","alert","catch","error","getMessageByError","style","display","confirm","length","createUserWithEmailAndPassword","id","type","onClick","processLogin","renderSignUp","handleSignUp","React","Component","Home","props","onChange","event","target","setState","query","state","users","fetch","res","json","signOut","this","processExit","className","placeholder","map","user","console","log","nickname","includes","key","href","github_profile","twitter_profile","contributions_count","App","authListener","bind","onAuthStateChanged","Boolean","window","location","hostname","match","myHeader","ReactDOM","render","StrictMode","onscroll","body","scrollTop","documentElement","backgroundColor","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.76a84efa.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyABeCn-7gs1gAuzr9xdXf6bp3JiQU3_kwA\",\r\n    authDomain: \"projeto-web-78e05.firebaseapp.com\",\r\n    databaseURL: \"https://projeto-web-78e05.firebaseio.com\",\r\n    projectId: \"projeto-web-78e05\",\r\n    storageBucket: \"projeto-web-78e05.appspot.com\",\r\n    messagingSenderId: \"552239057906\",\r\n    appId: \"1:552239057906:web:2db4080930433f597f396b\"\r\n  };\r\n\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fire;\r\n\r\n","import React from 'react';\r\nimport firebase from './config/firebase';\r\nimport './App.css';\r\n\r\nclass Login extends React.Component {\r\n\r\n    getMessageByError(code) {\r\n        switch(code) {\r\n          case \"auth/user-not-found\":\r\n            return \"E-mail não cadastrado.\";\r\n          case \"auth/wrong-password\":\r\n            return \"Senha incorreta.\";\r\n          default:\r\n            return \"Erro desconhecido.\";\r\n        }\r\n      }\r\n\r\n    processLogin() {\r\n\r\n    const email = document.querySelector(\"#email\").value;\r\n    const password = document.getElementById(\"password\").value;\r\n\r\n        firebase\r\n        .auth()\r\n        .signInWithEmailAndPassword(email, password)\r\n        .then(() => {\r\n            alert(\"Logado\")\r\n        })\r\n        .catch(error => {\r\n            alert(this.getMessageByError(error.code))\r\n        })\r\n    }\r\n\r\n    renderSignUp() {\r\n        document.getElementById(\"email\").value = \"\";\r\n        document.getElementById(\"password\").value = \"\";\r\n        document.getElementById(\"loginBtn\").style.display = \"none\";\r\n        document.getElementById(\"cadastrarBtn\").style.display = \"none\";\r\n        document.getElementById(\"confirm\").style.display = \"block\";\r\n        document.getElementById(\"confirmLabel\").style.display = \"block\";\r\n        document.getElementById(\"signupBtn\").style.display = \"block\";\r\n    }\r\n\r\n    handleSignUp() {\r\n        const email = document.getElementById(\"email\").value;\r\n        const password = document.getElementById(\"password\").value;\r\n        const confirm = document.getElementById(\"confirm\").value;\r\n        \r\n        if(password.length > 0) {\r\n            if(password.length < 6) {\r\n                alert(\"Senha deve ter pelo menos 6 caracteres\");\r\n            }else if(email.length < 6){\r\n                alert(\"Informar um email de pelo menos 6 caracteres\");\r\n            }else {\r\n                if(password === confirm) {\r\n                    firebase\r\n                    .auth()\r\n                    .createUserWithEmailAndPassword(email, password)\r\n                    .then(() => alert(\"Usuário cadastrado!\"))\r\n                    .catch(error => {\r\n                        alert(this.getMessageByError(error.code));\r\n                    })\r\n                    \r\n                }else {\r\n                    alert(\"Confirmação de senha incorreta.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n\r\n            <div id=\"login-area\">\r\n                <label>E-mail: <input id=\"email\" type=\"text\" /></label>\r\n                <label>Senha: <input id=\"password\" type=\"password\" /></label>\r\n                <label id=\"confirmLabel\">Confirmação de senha: <input id=\"confirm\" type=\"password\" /></label>\r\n                <button id=\"loginBtn\" onClick={() => this.processLogin()}>LOGIN</button>\r\n                <button id=\"cadastrarBtn\" onClick={() => this.renderSignUp()}>CADASTRAR</button>\r\n                <button id=\"signupBtn\" onClick={() => this.handleSignUp()}>CADASTRAR</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport firebase from './config/firebase';\r\n\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            query: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const url = 'https://cors-anywhere.herokuapp.com/24pullrequests.com/users.json';\r\n\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            this.setState({\r\n                users: json\r\n            })\r\n        });\r\n    }\r\n    \r\n    onChange = event => {\r\n        const { value } = event.target;\r\n        this.setState({\r\n            query: value\r\n        });\r\n    }\r\n    \r\n    processExit() {\r\n        firebase.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n\r\n        var { users, query} = this.state;\r\n\r\n        return(\r\n            <div id=\"home\">\r\n                <button id=\"exitBtn\" onClick={() => this.processExit()}>SAIR</button>\r\n                <input id=\"searchInput\"\r\n                       type=\"text\"\r\n                       className=\"search-box\"\r\n                       placeholder=\"Buscar apelido...\"\r\n                       onChange={this.onChange} />\r\n                    <ul>\r\n                        {users.map(user => {\r\n                            console.log(query);\r\n                            if(query.length > 0 && user.nickname.includes(query)) {\r\n                                return <div key={user.nickname}>\r\n                                    Nickname: {user.nickname}\r\n                                    <p id=\"search-result\">Github: <a href={user.github_profile}>{user.github_profile}</a></p>\r\n                                    <p>Twitter: <a href={user.twitter_profile}>{user.twitter_profile}</a></p>\r\n                                    <p>Contributions: {user.contributions_count}</p>\r\n                                </div>\r\n                            }\r\n                        })}\r\n                    </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Login from './Login';\nimport Home from './Home';\nimport firebase from './config/firebase';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: null,\n      password: null\n    }\n\n    this.authListener = this.authListener.bind(this);\n  }\n\n  authListener() {\n    firebase.auth().onAuthStateChanged(email => {\n      if(email) {\n        this.setState({ email });\n      }else {\n        this.setState({ email: null});\n      }\n    })\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.email ? (<Home/>) : (<Login/>)}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst myHeader = document.querySelector('header');\nconst logo = document.getElementById('logo');\n\nfunction scrollFunction() {\n  if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {\n    myHeader.style.backgroundColor = \"#ffffff\";\n\n  } else {\n    myHeader.style.backgroundColor = \"#000000\";\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n\n  window.onscroll = function() {scrollFunction()}\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}